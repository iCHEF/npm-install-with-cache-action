name: "Install Packages With Cache"
description: "Install Packages with npm auth token and cache"
inputs:
  npm-token:
    description: "NPM Token for private package"
    required: false
    default: ""
  skip-cache:
    description: "Wanna skip cache?"
    required: false
    default: "false"
  engine:
    description: "Package manager to use"
    required: false
    default: "npm"
  args:
    description: "Arguments to pass to the package manager"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    # cache configs
    - name: Output OS version
      id: output-os-version
      run: echo "version=`lsb_release -d -s`" >> $GITHUB_OUTPUT
      shell: bash
    - name: Output Node version
      id: output-node-version
      run: echo "version=`node -v`" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache node_modules
      if: ${{ !fromJSON(inputs.skip-cache) }}
      uses: actions/cache@v4
      with:
        path: "**/node_modules/"
        key: ${{ steps.output-os-version.outputs.version }}-node${{ steps.output-node-version.outputs.version }}-${{ inputs.engine }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: "10"

    # install packages
    - name: Set .npmrc to use npm auth
      if: ${{ inputs.npm-token }}
      run: |
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" >> .npmrc
        echo "#always-auth=true" >> .npmrc
      shell: bash
    - name: Install packages
      run: ${{ inputs.engine }} install ${{ inputs.args }}
      env:
        NPM_TOKEN: ${{ inputs.npm-token }}
      shell: bash
    - name: Delete .npmrc
      if: ${{ inputs.npm-token }}
      run: rm -f .npmrc
      shell: bash
